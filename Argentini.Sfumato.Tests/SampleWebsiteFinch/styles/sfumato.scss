@use "sass:math";

// sf-strip-unit() - Strip the unit off a measure (e.g. 1px = 1).
@function sf-strip-unit($number) {

    $value: sf-to-number($number);

    @if type-of($value) == 'number' and not unitless($value) {

        @return math.div($value, ($value * 0 + 1));

    }

    @return $value;
}

// sf-number2px($number) - Ensure a number uses pixel units.
@function sf-number2px($number) {

    @if unitless($number) {

        @warn "Assuming #{$number} to be in pixels, attempting to convert it into pixel blocks.";
        @return ($number * 1px);

    } @else if unit($number) == px {

        @return $number;
    }

    @return ($number * 1px);
}

//sf-to-length() - Add a unit to a value, returning a proper CSS measurement.
@function sf-to-length($value, $unit) {

    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

    @if not index(map-keys($units), $unit) {

        @warn 'Invalid unit `#{$unit}`.';
    }

    @return sf-to-number($value) * map-get($units, $unit);
}

// sf-to-number() - Convert a string to a proper SCSS number.
@function sf-to-number($string) {

    @if type-of($string) == 'number' {

        @return $string;

    } @else if type-of($string) != 'string' {

        @warn 'Value for `sf-to-number` should be a number or a string.';
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($string, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($string) {

        $character: str-slice($string, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character == '.') {

            @return sf-to-length(if($minus, -$result, $result), str-slice($string, $i));
        }

        @if $character == '.' {

            $digits: 1;

        } @else if $digits == 0 {

            $result: $result * 10 + map-get($numbers, $character);

        } @else {

            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

// sf-str-endswith() - Determine if string ends with a substring.
@function sf-str-endswith($string: false, $endswith: false) {

    @if ($string == false or $endswith == false) {

        @return false;

    } @else {

        @if (str-length(inspect($string)) > str-length(inspect($endswith))) {

            @if (str-index(inspect($string), inspect($endswith)) != null) {

                @if (str-index(inspect($string), inspect($endswith)) == str-length(inspect($string)) - str-length(inspect($endswith)) + 1) {

                    @return true;

                } @else {

                    @return false;
                }

            } @else {

                @return false;
            }

        } @else {

            @return false;
        }
    }
}
// Based on Modern Normalize
// https://github.com/sindresorhus/modern-normalize

// 1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)

*,
::before,
::after {
  box-sizing: border-box; // 1
  border-width: 0;
  border-style: solid;
  border-color: rgba(0, 0, 0, 0.25);  
}

// 1. Use a consistent sensible line-height in all browsers.
// 2. Prevent adjustments of font size after orientation changes in iOS.
// 3. Use a more readable tab size.

html {
  line-height: 1.5; // 1
  -webkit-text-size-adjust: 100%; // 2
  -moz-tab-size: 4; // 3
  tab-size: 4; // 3
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Aptos", "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
}

// 1. Remove the margin in all browsers.
// 2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.

body {
  margin: 0; // 1
  line-height: inherit; // 2
}

// 1. Add the correct height in Firefox.
// 2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
// 3. Ensure horizontal rules are visible by default.

hr {
  height: 0; // 1
  color: inherit; // 2
  border-top-width: 1px; // 3
}

// Add the correct text decoration in Chrome, Edge, and Safari.

abbr:where([title]) {
  text-decoration: underline dotted;
}

// Remove the default font size and weight for headings.

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

// Reset links to optimize for opt-in styling instead of opt-out.

a {
  color: inherit;
  text-decoration: inherit;
}

// Add the correct font weight in Edge and Safari.

b,
strong {
  font-weight: bolder;
}

// 1. Correct the odd `em` font sizing in all browsers.

code,
kbd,
samp,
pre {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-size: 1em; // 1
}

// Add the correct font size in all browsers.

small {
  font-size: 80%;
}

// Prevent `sub` and `sup` elements from affecting the line height in all browsers.

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

// 1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
// 2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
// 3. Remove gaps between table borders by default.

table {
  text-indent: 0; // 1
  border-color: inherit; // 2
  border-collapse: collapse; // 3
}

// 1. Change the font styles in all browsers.
// 2. Remove the margin in Firefox and Safari.
// 3. Remove default padding in all browsers.

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; // 1
  font-feature-settings: inherit; // 1
  font-variation-settings: inherit; // 1
  font-size: 100%; // 1
  font-weight: inherit; // 1
  line-height: inherit; // 1
  color: inherit; // 1
  margin: 0; // 2
  padding: 0; // 3
}

// Remove the inheritance of text transform in Edge and Firefox.

button,
select {
  text-transform: none;
}

// 1. Correct the inability to style clickable types in iOS and Safari.
// 2. Remove default button styles.

button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: button; // 1
  background-color: transparent; // 2
  background-image: none; // 2
}

// Use the modern Firefox focus style for all focusable elements.

:-moz-focusring {
  outline: auto;
}

// Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)

:-moz-ui-invalid {
  box-shadow: none;
}

// Add the correct vertical alignment in Chrome and Firefox.

progress {
  vertical-align: baseline;
}

// Correct the cursor style of increment and decrement buttons in Safari.

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

// 1. Correct the odd appearance in Chrome and Safari.
// 2. Correct the outline style in Safari.

[type='search'] {
  -webkit-appearance: textfield; // 1
  outline-offset: -2px; // 2
}

// Remove the inner padding in Chrome and Safari on macOS.

::-webkit-search-decoration {
  -webkit-appearance: none;
}

// 1. Correct the inability to style clickable types in iOS and Safari.
// 2. Change font properties to `inherit` in Safari.

::-webkit-file-upload-button {
  -webkit-appearance: button; // 1
  font: inherit; // 2
}

// Add the correct display in Chrome and Safari.

summary {
  display: list-item;
}

// Removes the default spacing and border for appropriate elements.

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Reset default styling for dialogs.

dialog {
  padding: 0;
}

// Prevent resizing textareas horizontally by default.

textarea {
  resize: vertical;
}

// 1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
// 2. Set the default placeholder color.

input::placeholder,
textarea::placeholder {
  opacity: 1; // 1
  color: #9ca3af; // 2
}

// Set the default cursor for buttons.

button,
[role="button"] {
  cursor: pointer;
}

// Make sure disabled buttons don't get the pointer cursor.

:disabled {
  cursor: default;
}

// 1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
// 2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
//    This can trigger a poorly considered lint error in some tools but is included by design.

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block; // 1
  vertical-align: middle; // 2
}

// Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)

img,
video {
  max-width: 100%;
  height: auto;
}

// Make elements with the HTML hidden attribute stay hidden by default

[hidden] {
  display: none;
}
// Following are settings for media breakpoints. Uses px units.
$media-breakpoints: (

    // REQUIRED: Used internally to streamline detection of mobile first styles.
    zero: 0px,

    // REQUIRED: Set the screen width for which a phab experience begins.
    // Standard value is 400px.
    phab: 400px,

    // REQUIRED: Set the screen width for which a portrait tablet experience begins.
    // Standard value is 540px.
    tabp: 540px,

    // REQUIRED: Set the screen width for which a landscape tablet experience begins.
    // Standard value is 800px.
    tabl: 800px,

    // REQUIRED: Set the screen width for which a notebook-sized experience begins.
    // Standard value is 1280px.
    note: 1280px,

    // REQUIRED: Set the screen width for which a desktop-sized experience begins.
    // Standard value is 1280px.
    desk: 1440px,

    // REQUIRED: Page content will stop growing at this (elastic) width.
    // Standard value is 1440px.
    elas: 1600px
);

$zero-breakpoint: map-get($media-breakpoints, "zero");
$phab-breakpoint: map-get($media-breakpoints, "phab");
$tabp-breakpoint: map-get($media-breakpoints, "tabp");
$tabl-breakpoint: map-get($media-breakpoints, "tabl");
$note-breakpoint: map-get($media-breakpoints, "note");
$desk-breakpoint: map-get($media-breakpoints, "desk");
$elas-breakpoint: map-get($media-breakpoints, "elas");

// Media query expressions.
// Used by sf-media to generate proper media queries.
$media-features: (
    portrait:  '(orientation: portrait)',
    landscape: '(orientation: landscape)'
);

// sf-get-feature($name, $features: $media-features) - Get a media query feature set by name (e.g. portrait); for use in media queries. Values in the $media-features variable.
@function sf-get-feature($name, $features: $media-features) {

    @if map-has-key($features, $name) {

        @return map-get($features, $name);

    } @else {

        @return false;
    }
}

// sf-get-breakpoint-width($name, $breakpoints) - Get the named media breakpoint width from a map.
@function sf-get-breakpoint-width($name, $breakpoints: $media-breakpoints) {

    @if map-has-key($breakpoints, $name) {

        @return map-get($breakpoints, $name);

    } @else {

        @warn "Breakpoint #{$name} wasn't found in $media-breakpoints.";
        @return false;
    }
}

// sf-media($feature, $from, $upto, $type) - Styles should only be applied to a specific media breakpoint.
@mixin sf-media(
    $feature:false, 
    $from:false, 
    $upto:false, 
    $type:screen
) {

    $min-width: 0;
    $max-width: 0;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {

        @if type-of($from) == number {

            $min-width: sf-number2px($from);

        } @else if sf-get-breakpoint-width($from) {

            $min-width: sf-number2px(sf-get-breakpoint-width($from));
        }
    }

    // Upto: that breakpoint (exclusive)
    @if $upto {

        @if type-of($upto) == number {

            $max-width: sf-number2px($upto);

        } @else if sf-get-breakpoint-width($upto) {

            $max-width: sf-number2px(sf-get-breakpoint-width($upto)) - 1px;
        }
    }

    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }

    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }

    @if $feature {

        // Pass through custom expression or get defined expression
        $original-feature: $feature;
        $feature: sf-get-feature($feature);

        @if $feature {

            $media-query: '#{$media-query} and #{$feature}';

        } @else {

            $media-query: '#{$media-query} and (#{$original-feature})';
        }
    }

    // Remove unnecessary media query prefix 'all and '
    @if ($type == 'all' and $media-query != '') {

        $type: '';
        $media-query: str-slice(unquote($media-query), 6);
    }


    // -------------------------------------------
    // GENERATE OUTPUT
    // -------------------------------------------

    $skip: false;

    @if ($from != false and nth(map-get($media-breakpoints, $from), 1) == false)
    {
        $skip: true;
    }

    @if ($upto != false and nth(map-get($media-breakpoints, $upto), 1) == false)
    {
        $skip: true;
    }

    @if ($skip == false) {

        @media #{$type + $media-query} {

            @content;
        }
    }
}

@media (prefers-reduced-motion: no-preference) {
    @-webkit-keyframes scroll {
        0% {
            transform: translateX(100%);
        }

        100% {
            transform: translateX(-100%);
        }
    }
    @keyframes scroll {
        0% {
            transform: translateX(100%);
        }

        100% {
            transform: translateX(-100%);
        }
    }
    @-webkit-keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
}
// Font and other base styles are established in this file.
// It should be called after the configuration files have been loaded.

* {
    &,
    &:before,
    &:after { box-sizing: border-box; }

    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;

    -webkit-text-size-adjust: none;
    -webkit-font-size-adjust: none;
    -webkit-marquee-increment: 0;
    
    word-spacing: initial;
    letter-spacing: initial;
    word-break: break-word;

    & > * {

        font-weight: inherit;
    }
}

html {

    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

    font-size: 16px;

    @include sf-media($from: phab) {

        font-size: 16px;
    }

    @include sf-media($from: tabp) {

        font-size: 16px;
    }

    @include sf-media($from: tabl) {

        font-size: 16px;
    }

    @include sf-media($from: note) {

        font-size: 16px;
    }

    @include sf-media($from: desk) {

        font-size: 16px;
    }

    @include sf-media($from: elas) {

        font-size: 16px;
    }
}

html, body {

    overflow: visible;
    max-width: 100vw;
}

body {

    // Needed for mobile
    position: relative;
    font-size: 1rem;

    main {

        max-width: 100vw;

        // Needed for mobile
        overflow-x: hidden;
    }
}
.form-input, .form-textarea, .form-select, .form-multiselect {
    appearance: none;
    background-color: #fff;
    border-color: rgb(107, 114, 128);
    border-width: 1px;
    border-radius: 0.125rem;
    padding: 0.65rem 0.75rem;
    font-size: 1rem;
    line-height: 1;

    --sf-shadow: 0 0 #0000;

    &:focus {
        outline: 0.1875rem solid transparent;
        outline-offset: 0.1875rem;
        --sf-ring-inset: var(--sf-empty,/*!*/ /*!*/);
        --sf-ring-offset-width: 0px;
        --sf-ring-offset-color: #fff;
        --sf-ring-color: rgb(191, 219, 254);
        --sf-ring-offset-shadow: var(--sf-ring-inset) 0 0 0 var(--sf-ring-offset-width) var(--sf-ring-offset-color);
        --sf-ring-shadow: var(--sf-ring-inset) 0 0 0 calc(0.1875rem + var(--sf-ring-offset-width)) var(--sf-ring-color);
        box-shadow: var(--sf-ring-offset-shadow), var(--sf-ring-shadow), var(--sf-shadow);
        border-color: rgb(96, 165, 250);
    }
}

.form-select {

    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
    print-color-adjust: exact;

    &:where([size]:not([size="1"])) {
        background-image: initial;
        background-position: initial;
        background-repeat: unset;
        background-size: initial;
        padding-right: 0.75rem;
        print-color-adjust: unset;
    }
}

.form-input, .form-textarea {

    &::placeholder {
        opacity: 1;
        color: rgb(107, 114, 128);
    }    
}

.form-input {

    &::-webkit-datetime-edit-fields-wrapper {
        padding: 0;
    }

    &::-webkit-date-and-time-value {
        text-align: inherit;
    }

    &::-webkit-datetime-edit {
        display: inline-flex;
    }

    &::-webkit-datetime-edit,
    &::-webkit-datetime-edit-year-field,
    &::-webkit-datetime-edit-month-field,
    &::-webkit-datetime-edit-day-field,
    &::-webkit-datetime-edit-hour-field,
    &::-webkit-datetime-edit-minute-field,
    &::-webkit-datetime-edit-second-field,
    &::-webkit-datetime-edit-millisecond-field,
    &::-webkit-datetime-edit-meridiem-field {
        padding-top: 0;
        padding-bottom: 0;
    }
}

.form-checkbox, .form-radio {

    appearance: none;
    padding: 0;
    print-color-adjust: exact;
    display: inline-block;
    vertical-align: middle;
    background-origin: border-box;
    user-select: none;
    flex-shrink: 0;
    height: 1rem;
    width: 1rem;
    color: rgb(96, 165, 250);
    background-color: #fff;
    border-color: rgb(107, 114, 128);
    border-width: 1px;
    
    --sf-shadow: 0 0 #0000;

    &:focus {
        outline: 0.1875rem solid transparent;
        outline-offset: 0.1875rem;
        --sf-ring-inset: var(--sf-empty,/*!*/ /*!*/);
        --sf-ring-offset-width: 0rem;
        --sf-ring-offset-color: #fff;
        --sf-ring-color: rgb(191, 219, 254);
        --sf-ring-offset-shadow: var(--sf-ring-inset) 0 0 0 var(--sf-ring-offset-width) var(--sf-ring-offset-color);
        --sf-ring-shadow: var(--sf-ring-inset) 0 0 0 calc(0.1875rem + var(--sf-ring-offset-width)) var(--sf-ring-color);
        box-shadow: var(--sf-ring-offset-shadow), var(--sf-ring-shadow), var(--sf-shadow);
    }

    &:checked {
        border-color: transparent;
        background-color: currentColor;
        background-size: 100% 100%;
        background-position: center;
        background-repeat: no-repeat;
    }

    &:checked:hover, &:checked:focus {
        border-color: transparent;
        background-color: currentColor;
    }
}

.form-checkbox {
    
    border-radius: 0.125rem;

    &:checked {
        background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e");
    }

    &:indeterminate {
        
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 16 16'%3e%3cpath stroke='white' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 8h8'/%3e%3c/svg%3e");
        border-color: transparent;
        background-color: currentColor;
        background-size: 100% 100%;
        background-position: center;
        background-repeat: no-repeat;
        
        &:hover, &:focus {
            border-color: transparent;
            background-color: currentColor;
        }
    }
}
    
.form-radio {

    border-radius: 100%;

    &:checked {
        background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle cx='8' cy='8' r='3'/%3e%3c/svg%3e");
    }
}
    
[type="file"] {

    background: unset;
    border-color: inherit;
    border-width: 0;
    border-radius: 0;
    padding: 0;
    font-size: unset;
    line-height: inherit;

    &:focus {
        outline: 1px auto -webkit-focus-ring-color;
    }
}
.to,.from {
    --sf-gradient-from-position: ; --sf-gradient-via-position: ; --sf-gradient-to-position: ;
}
.absolute {
    position: absolute;
}
.basis-1\/2 {
    flex-basis: 50%;
}
.basis-1\/3 {
    flex-basis: 33.333333%;
}
.basis-1\/4 {
    flex-basis: 25%;
}
.basis-2\/3 {
    flex-basis: 66.666667%;
}
.bg-\[url\(\.\.\/assets\/faq-pattern-finch\.png\)\] {
    background-image: url(../assets/faq-pattern-finch.png);
}
.bg-center {
    background-position: center;
}
.bg-cover {
    background-size: cover;
}
.bg-cyan-400 {
    background-color: rgba(34,211,238,1.0);
}
.bg-emerald-600 {
    background-color: rgba(5,150,105,1.0);
}
.bg-no-repeat {
    background-repeat: no-repeat;
}
.bg-orange-200 {
    background-color: rgba(254,215,170,1.0);
}
.bg-orange-400 {
    background-color: rgba(251,146,60,1.0);
}
.bg-pink-400 {
    background-color: rgba(244,114,182,1.0);
}
.bg-purple-600 {
    background-color: rgba(147,51,234,1.0);
}
.bg-rose-400 {
    background-color: rgba(251,113,133,1.0);
}
.bg-white {
    background-color: rgba(255,255,255,1.0);
}
.block {
    display: block;
}
.border {
    border-width: 1px;
}
.border-b {
    border-bottom-width: 1px;
}
.border-t {
    border-top-width: 1px;
}
.border-t-2 {
    border-top-width: 0.125rem;
}
.col-span-5 {
    grid-column: span 5 / span 5;
}
.col-span-7 {
    grid-column: span 7 / span 7;
}
.fill-black {
    fill: rgba(0,0,0,1.0);
}
.fill-white {
    fill: rgba(255,255,255,1.0);
}
.flex {
    display: flex;
}
.flex-auto {
    flex: 1 1 auto;
}
.flex-nowrap {
    flex-wrap: nowrap;
}
.flex-row {
    flex-direction: row;
}
.flex-row-reverse {
    flex-direction: row-reverse;
}
.flex-wrap {
    flex-wrap: wrap;
}
.font-bold {
    font-weight: 700;
}
.font-sans {
    font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Aptos", "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
}
.font-serif {
    font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
}
.gap-4 {
    gap: 1rem;
}
.gap-8 {
    gap: 2rem;
}
.grid {
    display: grid;
}
.grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
}
.grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
}
.h-10 {
    height: 2.5rem;
}
.h-6 {
    height: 1.5rem;
}
.hidden {
    display: none;
}
.inline {
    display: inline;
}
.inset-x-0 {
    left: 0px;
    right: 0px;
}
.italic {
    font-style: italic;
}
.items-center {
    align-items: center;
}
.justify-between {
    justify-content: space-between;
}
.justify-center {
    justify-content: center;
}
.max-h-\[600\] {
    max-height: 600;
}
.max-w-\[1440px\] {
    max-width: 1440px;
}
.max-w-\[80\%\] {
    max-width: 80%;
}
.max-w-2xl {
    max-width: 42rem;
}
.max-w-3xl {
    max-width: 48rem;
}
.max-w-4xl {
    max-width: 56rem;
}
.max-w-5xl {
    max-width: 64rem;
}
.max-w-6xl {
    max-width: 72rem;
}
.max-w-full {
    max-width: 100%;
}
.max-w-sm {
    max-width: 24rem;
}
.max-w-xs {
    max-width: 20rem;
}
.mb-2 {
    margin-bottom: 0.5rem;
}
.mb-5 {
    margin-bottom: 1.25rem;
}
.min-h-\[650\] {
    min-height: 650;
}
.mr-2 {
    margin-right: 0.5rem;
}
.mt-12 {
    margin-top: 3rem;
}
.mx-auto {
    margin-left: auto;
    margin-right: auto;
}
.my-14 {
    margin-top: 3.5rem;
    margin-bottom: 3.5rem;
}
.overflow-hidden {
    overflow: hidden;
}
.p-\[1rem\] {
    padding: 1rem;
}
.p-2 {
    padding: 0.5rem;
}
.pb-\[1rem\] {
    padding-bottom: 1rem;
}
.pb-\[3rem\] {
    padding-bottom: 3rem;
}
.pb-\[6rem\] {
    padding-bottom: 6rem;
}
.pb-3 {
    padding-bottom: 0.75rem;
}
.pb-5 {
    padding-bottom: 1.25rem;
}
.pl-\[3rem\] {
    padding-left: 3rem;
}
.pr-\[3rem\] {
    padding-right: 3rem;
}
.pr-\[6rem\] {
    padding-right: 6rem;
}
.pt-\[1rem\] {
    padding-top: 1rem;
}
.pt-\[3rem\] {
    padding-top: 3rem;
}
.pt-\[6rem\] {
    padding-top: 6rem;
}
.pt-\[7rem\] {
    padding-top: 7rem;
}
.px-\[0\.5rem\] {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
}
.px-\[1rem\] {
    padding-left: 1rem;
    padding-right: 1rem;
}
.px-\[3rem\] {
    padding-left: 3rem;
    padding-right: 3rem;
}
.px-\[6rem\] {
    padding-left: 6rem;
    padding-right: 6rem;
}
.px-10 {
    padding-left: 2.5rem;
    padding-right: 2.5rem;
}
.px-3 {
    padding-left: 0.75rem;
    padding-right: 0.75rem;
}
.px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
}
.px-7 {
    padding-left: 1.75rem;
    padding-right: 1.75rem;
}
.py-\[1rem\] {
    padding-top: 1rem;
    padding-bottom: 1rem;
}
.py-\[3rem\] {
    padding-top: 3rem;
    padding-bottom: 3rem;
}
.py-\[6rem\] {
    padding-top: 6rem;
    padding-bottom: 6rem;
}
.py-8 {
    padding-top: 2rem;
    padding-bottom: 2rem;
}
.relative {
    position: relative;
}
.rounded-full {
    border-radius: 9999px;
}
.rounded-lg {
    border-radius: 0.5rem;
}
.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}
.static {
    position: static;
}
.stroke-transparent {
    stroke: transparent;
}
.text-base {
    font-size: 1rem;
    line-height: 1.5rem;
}
.text-blue-700 {
    color: rgba(29,78,216,1.0);
}
.text-center {
    text-align: center;
}
.text-lg {
    font-size: 1.125rem;
    line-height: 1.75rem;
}
.text-orange-600 {
    color: rgba(234,88,12,1.0);
}
.text-pink-400 {
    color: rgba(244,114,182,1.0);
}
.text-right {
    text-align: right;
}
.text-sm {
    font-size: 0.875rem;
    line-height: 1.25rem;
}
.text-white {
    color: rgba(255,255,255,1.0);
}
.text-xl {
    font-size: 1.25rem;
    line-height: 1.75rem;
}
.text-xs {
    font-size: 0.75rem;
    line-height: 1rem;
}
.top-0 {
    top: 0px;
}
.tracking-wide {
    letter-spacing: 0.025em;
}
.tracking-wider {
    letter-spacing: 0.05em;
}
.tracking-widest {
    letter-spacing: 0.1em;
}
.underline {
    text-decoration-line: underline;
}
.underline-offset-4 {
    text-underline-offset: 0.25rem;
}
.uppercase {
    text-transform: uppercase;
}
.w-10 {
    width: 2.5rem;
}
.w-6 {
    width: 1.5rem;
}
.w-full {
    width: 100%;
}
.whitespace-nowrap {
    white-space: nowrap;
}
.z-10 {
    z-index: 10;
}
.hover\:cursor-pointer {
    &:hover {
        cursor: pointer;
    }
}
.hover\:opacity-75 {
    &:hover {
        opacity: 0.75;
    }
}
@include sf-media($from: phab) {
    .phab\:basis-1\/2 {
        flex-basis: 50%;
    }
}
@include sf-media($from: tabp) {
    .tabp\:basis-1\/2 {
        flex-basis: 50%;
    }
    .tabp\:basis-1\/3 {
        flex-basis: 33.333333%;
    }
    .tabp\:basis-1\/4 {
        flex-basis: 25%;
    }
    .tabp\:basis-2\/3 {
        flex-basis: 66.666667%;
    }
    .tabp\:basis-2\/5 {
        flex-basis: 40%;
    }
    .tabp\:basis-3\/5 {
        flex-basis: 60%;
    }
    .tabp\:flex-nowrap {
        flex-wrap: nowrap;
    }
    .tabp\:grid-cols-12 {
        grid-template-columns: repeat(12, minmax(0, 1fr));
    }
    .tabp\:grid-cols-3 {
        grid-template-columns: repeat(3, minmax(0, 1fr));
    }
    .tabp\:pl-\[3rem\] {
        padding-left: 3rem;
    }
    .tabp\:pr-0 {
        padding-right: 0px;
    }
    .tabp\:pt-0 {
        padding-top: 0px;
    }
    .tabp\:px-\[3rem\] {
        padding-left: 3rem;
        padding-right: 3rem;
    }
    .tabp\:px-\[6rem\] {
        padding-left: 6rem;
        padding-right: 6rem;
    }
    .tabp\:px-0 {
        padding-left: 0px;
        padding-right: 0px;
    }
    .tabp\:py-\[6rem\] {
        padding-top: 6rem;
        padding-bottom: 6rem;
    }
}
@include sf-media($from: tabl) {
    .tabl\:basis-1\/3 {
        flex-basis: 33.333333%;
    }
    .tabl\:basis-1\/6 {
        flex-basis: 16.666667%;
    }
    .tabl\:basis-2\/3 {
        flex-basis: 66.666667%;
    }
    .tabl\:basis-2\/5 {
        flex-basis: 40%;
    }
    .tabl\:basis-3\/5 {
        flex-basis: 60%;
    }
    .tabl\:flex-nowrap {
        flex-wrap: nowrap;
    }
    .tabl\:items-end {
        align-items: flex-end;
    }
    .tabl\:max-w-sm {
        max-width: 24rem;
    }
    .tabl\:max-w-xs {
        max-width: 20rem;
    }
    .tabl\:pr-\[6rem\] {
        padding-right: 6rem;
    }
    .tabl\:px-\[10rem\] {
        padding-left: 10rem;
        padding-right: 10rem;
    }
    .tabl\:px-\[6rem\] {
        padding-left: 6rem;
        padding-right: 6rem;
    }
    .tabl\:py-\[3rem\] {
        padding-top: 3rem;
        padding-bottom: 3rem;
    }
    .tabl\:text-lg {
        font-size: 1.125rem;
        line-height: 1.75rem;
    }
}
@media (prefers-reduced-motion: no-preference) {
    .motion-safe\:animate-\[scroll_15s_linear_infinite\] {
        animation: scroll 15s linear infinite;
    }
    .motion-safe\:animate-\[spin_18s_linear_infinite\] {
        animation: spin 18s linear infinite;
    }
}
