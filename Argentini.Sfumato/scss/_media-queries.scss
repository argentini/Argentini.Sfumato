// Following are settings for media breakpoints. Uses px units.

$mobi-breakpoint: "";
$tabp-breakpoint: "";
$tabl-breakpoint: "";
$desk-breakpoint: "";
$wide-breakpoint: "";
$vast-breakpoint: "";

@mixin sf-adaptive($device:false) {

    @if $device {
        @media #{$device} {
            @content;
        }
    }
}

// Following are settings for media breakpoints. Uses px units.
$media-breakpoints: (

    // REQUIRED: Set the screen width for which a portrait tablet experience begins.
    // Standard value is 640px.
    sm: #{sm-bp},

    // REQUIRED: Set the screen width for which a landscape tablet experience begins.
    // Standard value is 768px.
    md: #{md-bp},

    // REQUIRED: Set the screen width for which a notebook-sized experience begins.
    // Standard value is 1024px.
    lg: #{lg-bp},

    // REQUIRED: Set the screen width for which a desktop-sized experience begins.
    // Standard value is 1280px.
    xl: #{xl-bp},

    // REQUIRED: Page content will stop growing at this (elastic) width.
    // Standard value is 1536px.
    xxl: #{xxl-bp}
);

$sm-breakpoint: map-get($media-breakpoints, "sm");
$md-breakpoint: map-get($media-breakpoints, "md");
$lg-breakpoint: map-get($media-breakpoints, "lg");
$xl-breakpoint: map-get($media-breakpoints, "xl");
$xxl-breakpoint: map-get($media-breakpoints, "xxl");

// Media query expressions.
// Used by sf-media to generate proper media queries.
$media-features: (
    portrait:  '(orientation: portrait)',
    landscape: '(orientation: landscape)'
);

// sf-get-feature($name, $features: $media-features) - Get a media query feature set by name (e.g. portrait); for use in media queries. Values in the $media-features variable.
@function sf-get-feature($name, $features: $media-features) {

    @if map-has-key($features, $name) {

        @return map-get($features, $name);

    } @else {

        @return false;
    }
}

// sf-get-breakpoint-width($name, $breakpoints) - Get the named media breakpoint width from a map.
@function sf-get-breakpoint-width($name, $breakpoints: $media-breakpoints) {

    @if map-has-key($breakpoints, $name) {

        @return map-get($breakpoints, $name);

    } @else {

        @warn "Breakpoint #{$name} wasn't found in $media-breakpoints.";
        @return false;
    }
}

// sf-media($feature, $from, $upto, $type) - Styles should only be applied to a specific media breakpoint.
@mixin sf-media(
    $feature:false, 
    $from:false, 
    $upto:false, 
    $type:screen
) {

    $min-width: 0;
    $max-width: 0;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {

        @if type-of($from) == 'number' {

            $min-width: $from;

        } @else if sf-get-breakpoint-width($from) {

            $min-width: sf-get-breakpoint-width($from);
        }
    }

    // Upto: that breakpoint (exclusive)
    @if $upto {

        @if type-of($upto) == 'number' {

            $max-width: $upto;

        } @else if sf-get-breakpoint-width($upto) {

            $unit: unit(sf-get-breakpoint-width($upto));
            $breakpoint: sf-get-breakpoint-width($upto);
            
            @if $unit == 'em' {

                $max-width: $breakpoint - 0.0625em;
                
            } @else if $unit == 'rem' {
    
                $max-width: $breakpoint - 0.0625rem;

            } @else {

                $max-width: $breakpoint - 1px;
            }
        }
    }

    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }

    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }

    @if $feature {

        // Pass through custom expression or get defined expression
        $original-feature: $feature;
        $feature: sf-get-feature($feature);

        @if $feature {

            $media-query: '#{$media-query} and #{$feature}';

        } @else {

            $media-query: '#{$media-query} and (#{$original-feature})';
        }
    }

    // Remove unnecessary media query prefix 'all and '
    @if ($type == 'all' and $media-query != '') {

        $type: '';
        $media-query: str-slice(unquote($media-query), 6);
    }


    // -------------------------------------------
    // GENERATE OUTPUT
    // -------------------------------------------

    $skip: false;

    @if ($from != false and nth(map-get($media-breakpoints, $from), 1) == false)
    {
        $skip: true;
    }

    @if ($upto != false and nth(map-get($media-breakpoints, $upto), 1) == false)
    {
        $skip: true;
    }

    @if ($skip == false) {

        @media #{$type + $media-query} {

            @content;
        }
    }
}

// sf-dark-theme() - Styles should only be applied to Sfumato dark theme variants.
@mixin sf-dark-theme() {

    $internal-dark-theme: "";

    @if ($internal-dark-theme == "class" or $internal-dark-theme == "class+auto") {
    
        html.theme-dark {
            @content;
        }
    
        @if ($internal-dark-theme == "class+auto") {
    
            @media (prefers-color-scheme: dark) {
                html.theme-auto {
                    @content;
                }
            }
        }
    
    } @else {
        
        @media (prefers-color-scheme: dark) {
            @content;
        }
    }
}
