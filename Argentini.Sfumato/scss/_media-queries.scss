// Following are settings for media breakpoints. Uses px units.
$media-breakpoints: (

    // REQUIRED: Used internally to streamline detection of mobile first styles.
    zero: #{zero-bp},

    // REQUIRED: Set the screen width for which a phab experience begins.
    // Standard value is 400px.
    phab: #{phab-bp},

    // REQUIRED: Set the screen width for which a portrait tablet experience begins.
    // Standard value is 540px.
    tabp: #{tabp-bp},

    // REQUIRED: Set the screen width for which a landscape tablet experience begins.
    // Standard value is 800px.
    tabl: #{tabl-bp},

    // REQUIRED: Set the screen width for which a notebook-sized experience begins.
    // Standard value is 1280px.
    note: #{note-bp},

    // REQUIRED: Set the screen width for which a desktop-sized experience begins.
    // Standard value is 1280px.
    desk: #{desk-bp},

    // REQUIRED: Page content will stop growing at this (elastic) width.
    // Standard value is 1440px.
    elas: #{elas-bp}
);

$zero-breakpoint: map-get($media-breakpoints, "zero");
$phab-breakpoint: map-get($media-breakpoints, "phab");
$tabp-breakpoint: map-get($media-breakpoints, "tabp");
$tabl-breakpoint: map-get($media-breakpoints, "tabl");
$note-breakpoint: map-get($media-breakpoints, "note");
$desk-breakpoint: map-get($media-breakpoints, "desk");
$elas-breakpoint: map-get($media-breakpoints, "elas");

// Media query expressions.
// Used by sf-media to generate proper media queries.
$media-features: (
    portrait:  '(orientation: portrait)',
    landscape: '(orientation: landscape)'
);

// sf-get-feature($name, $features: $media-features) - Get a media query feature set by name (e.g. portrait); for use in media queries. Values in the $media-features variable.
@function sf-get-feature($name, $features: $media-features) {

    @if map-has-key($features, $name) {

        @return map-get($features, $name);

    } @else {

        @return false;
    }
}

// sf-get-breakpoint-width($name, $breakpoints) - Get the named media breakpoint width from a map.
@function sf-get-breakpoint-width($name, $breakpoints: $media-breakpoints) {

    @if map-has-key($breakpoints, $name) {

        @return map-get($breakpoints, $name);

    } @else {

        @warn "Breakpoint #{$name} wasn't found in $media-breakpoints.";
        @return false;
    }
}

// sf-media($feature, $from, $upto, $type) - Styles should only be applied to a specific media breakpoint.
@mixin sf-media(
    $feature:false, 
    $from:false, 
    $upto:false, 
    $type:screen
) {

    $min-width: 0;
    $max-width: 0;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {

        @if type-of($from) == 'number' {

            $min-width: $from;

        } @else if sf-get-breakpoint-width($from) {

            $min-width: sf-get-breakpoint-width($from);
        }
    }

    // Upto: that breakpoint (exclusive)
    @if $upto {

        @if type-of($upto) == 'number' {

            $max-width: $upto;

        } @else if sf-get-breakpoint-width($upto) {

            $unit: unit(sf-get-breakpoint-width($upto));
            $breakpoint: sf-get-breakpoint-width($upto);
            
            @if $unit == 'em' {

                $max-width: $breakpoint - 0.0625em;
                
            } @else if $unit == 'rem' {
    
                $max-width: $breakpoint - 0.0625rem;

            } @else {

                $max-width: $breakpoint - 1px;
            }
        }
    }

    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }

    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }

    @if $feature {

        // Pass through custom expression or get defined expression
        $original-feature: $feature;
        $feature: sf-get-feature($feature);

        @if $feature {

            $media-query: '#{$media-query} and #{$feature}';

        } @else {

            $media-query: '#{$media-query} and (#{$original-feature})';
        }
    }

    // Remove unnecessary media query prefix 'all and '
    @if ($type == 'all' and $media-query != '') {

        $type: '';
        $media-query: str-slice(unquote($media-query), 6);
    }


    // -------------------------------------------
    // GENERATE OUTPUT
    // -------------------------------------------

    $skip: false;

    @if ($from != false and nth(map-get($media-breakpoints, $from), 1) == false)
    {
        $skip: true;
    }

    @if ($upto != false and nth(map-get($media-breakpoints, $upto), 1) == false)
    {
        $skip: true;
    }

    @if ($skip == false) {

        @media #{$type + $media-query} {

            @content;
        }
    }
}
